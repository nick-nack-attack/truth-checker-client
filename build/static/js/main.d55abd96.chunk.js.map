{"version":3,"sources":["contexts/ItemsContext.js","contexts/SessionContext.js","contexts/AuthContextProvider.js","config.js","services/token-service.js","contexts/UserContext.js","utils/PrivateRoute.js","services/facts-service.js","helpers/helpers.js","structure/AppWrapper.js","components/utils/Burger.styled.js","components/utils/Menu.styled.js","structure/Header.js","structure/Footer.js","components/utils/Report.js","components/views/MainFeed/MainFeed.js","utils/PublicRoute.js","components/utils/UseInputChange.js","components/utils/ApprovedFact.js","components/utils/ErrorMessage.js","components/views/AddFactForm/AddFactForm.js","services/users-service.js","components/views/AdminLogin/AdminLogin.js","components/views/EditFactForm/EditFactForm.js","components/views/ViewFact/ViewFact.js","components/views/ReportFeed/ReportFeed.js","App.js","features/counter/counterSlice.js","features/Facts/factsSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["ItemsContext","createContext","initialState","fetched","facts","reports","all","error","reducer","state","action","type","payload","ItemsContextProvider","props","useReducer","value","dispatch","Provider","children","SessionContext","Consumer","menu","open","toggleMenu","SessionContextProvider","AuthContextProvider","TOKEN_KEY","process","REACT_APP_TOKEN_KEY","API_ENDPOINT","TokenService","saveAuthToken","token","user_id","window","localStorage","setItem","config","getAuthToken","getItem","clearAuthToken","removeItem","hasAuthToken","makeBasicAuthToken","userName","password","btoa","UserContext","name","isLoggedIn","UserContextProvider","PrivateRoute","component","Component","render","componentProps","to","pathname","FactsApiService","getFacts","fetch","headers","then","res","ok","json","e","Promise","reject","addFact","newFact","method","body","JSON","stringify","updateFact","fact_id","updatedFact","deleteFact","reportFact","getReports","deleteReport","report_id","prettyDate","oldDate","format","Date","inputDateFormat","AppWrapper","itemsContext","useContext","checkUserLoggedIn","data","settings","logout","useEffect","styled","button","theme","primaryDark","primaryLight","nav","mobile","primaryHover","Header","history","useHistory","userContext","className","onClick","push","Footer","Report","id","confirm","reportedFact","result","alert","handleReportClick","MainFeed","factLabel","useState","searchTerm","setSearchTerm","searchResults","setSearchResults","statusSelected","setstatusSelected","results","filter","fact","title","toLowerCase","includes","filteredResults","status","onSubmit","preventDefault","placeholder","onChange","event","target","length","sort","a","b","map","date_submitted","date_approved","date_not_true","PublicOnlyRoute","UseInputChange","defaults","input","setInput","handleInputChange","currentTarget","checked","ApprovedFact","ErrorMessage","message","AddFactForm","isUSCitizen","setIsUSCitizen","isNotTerrorist","setIsNotTerrorist","hasReadTerms","setHasReadTerms","errors","setErrors","submitForm","factProperties","undefined","Object","keys","validateAddFact","htmlFor","UsersService","postLogin","credentials","Login","submitLogin","loginCreds","email","authToken","catch","validateAdminLoginForm","autoComplete","EditFactForm","currentFact","factIdInt","parseInt","find","findFactById","setTitle","text","setText","factId","setFactId","submitted","setSubmitted","underReview","setUnderReview","approved","setApproved","notTrue","setNotTrue","date_under_review","factFields","validateEditFactForm","defaultValue","ViewFact","setFact","date_submittd","ReportFeed","reportedFacts","setReportedFacts","number_of_reports","ft","fact_status","App","useRef","PublicRoute","exact","path","AdminLogin","match","params","counterSlice","createSlice","reducers","increment","decrement","incrementByAmount","actions","factsSlice","removeFact","configureStore","counter","counterReducer","counter2","counter2Reducer","Boolean","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d55abd96.chunk.js","sourcesContent":["// Contexts for all the content\nimport React, {\n    createContext,\n    useReducer\n} from \"react\";\n\nlet ItemsContext = createContext();\n\nlet initialState = {\n    fetched: false,\n    facts: [],\n    reports: [],\n    all: [],\n    error: null\n};\n\n// Allows dispatch actions to update state\nlet reducer = (state, action) => {\n    switch (action.type) {\n        // set facts from the response\n        case 'set-items':\n            return {\n                ...state,\n                fetched: true,\n                facts: action.payload.facts,\n                reports: action.payload.reports,\n                all: action.payload.all\n            }\n            // update only the facts\n            case 'set-facts':\n                return {\n                    ...state,\n                    facts: action.payload,\n                }\n            case 'set-reports':\n                return {\n                    ...state,\n                    reports: action.payload,\n                    fetched: true\n                }\n            // set all items\n            case 'set-all':\n                return {\n                    ...state,\n                    all: action.payload\n                }\n            // refetch items from database\n            case 'refetch':\n                return {\n                    ...state,\n                    fetched: false\n                }\n            // set error in state\n            case 'set-error':\n                return {\n                    ...state,\n                    error: action.payload\n                }\n            default:\n                return initialState\n    }\n};\n\nconst ItemsContextProvider = (props) => {\n    let [ state, dispatch ] = useReducer(reducer, initialState);\n    let value = { state, dispatch };\n    return (\n        <ItemsContext.Provider value={value}>\n            { props.children }\n        </ItemsContext.Provider>\n    );\n};\n\nlet ItemsContextConsumer = ItemsContext.Consumer;\n\nexport { ItemsContext, ItemsContextProvider, ItemsContextConsumer };","import React, {\n    createContext,\n    useReducer\n} from \"react\";\n\n// utilities\n\nlet SessionContext = createContext();\n\nlet initialState = {\n    menu: {\n        open: false,\n        toggleMenu: () => {}\n    }\n};\n\n// allow dispatch actions to update state\nlet reducer = (state, action) => {\n    switch (action.type) {\n        // start session\n        case \"start-session\":\n            return {\n                ...state,\n            }\n\n        // open or close menu\n        case \"toggle-menu\":\n            return {\n                ...state,\n                menu: {\n                    open: !state.menu.open\n                }\n            }\n        default:\n            return {\n                ...initialState\n            };\n    }\n};\n\nconst SessionContextProvider = (props) => {\n    let [ state, dispatch ] = useReducer(reducer, initialState);\n    let value = { state, dispatch };\n    return (\n        <SessionContext.Provider value={value}>\n            { props.children }\n        </SessionContext.Provider>\n    );\n};\n\nlet SessionContextConsumer = SessionContext.Consumer;\n\nexport { SessionContext, SessionContextProvider, SessionContextConsumer };","// this file has all the contexts needs in the app\nimport React from 'react';\n\n// here are the context providers\nimport { ItemsContextProvider } from './ItemsContext';\nimport { SessionContextProvider } from './SessionContext';\n\nconst AuthContextProvider = (props) => {\n    return (\n        <SessionContextProvider>\n            <ItemsContextProvider>\n                { props.children }\n            </ItemsContextProvider>\n        </SessionContextProvider>\n    )};\n\nexport default AuthContextProvider;","export default {\n    TOKEN_KEY: process.env.REACT_APP_TOKEN_KEY, \n    API_ENDPOINT: \"https://serene-chamber-88335.herokuapp.com\"\n  }","// Helper file to manage authentication tokens for the user\nimport config from '../config';\n\nconst TokenService = {\n  // Save the user's authenticated token\n  saveAuthToken: (token, user_id) => {\n    window.localStorage.setItem(config.TOKEN_KEY, token)\n    window.localStorage.setItem(\"user_id\", user_id)\n  },\n  // Retrieve the saved authentication token\n  getAuthToken: () => {\n    return window.localStorage.getItem(config.TOKEN_KEY)\n  },\n  // Remove the authentication token\n  clearAuthToken: () => {\n    window.localStorage.removeItem(config.TOKEN_KEY)\n    window.localStorage.removeItem(\"user_id\")\n  },\n  // Boolean response if the user has an authentication token\n  hasAuthToken: () => {\n    return !!TokenService.getAuthToken()\n  },\n  // Create a basic authentication token for the user\n  makeBasicAuthToken: (userName, password) => {\n    return window.btoa(`${userName}:${password}`)\n  }\n}\n\nexport default TokenService;\n","// context for the user\nimport React, {\n    createContext,\n    useReducer\n} from \"react\";\n\n// service\nimport TokenService from '../services/token-service';\n\nlet UserContext = createContext();\n\nlet initialState = {\n    name: 'Admin',\n    isLoggedIn: false,\n    fetched: false\n};\n\nlet reducer = (state, action) => {\n    switch (action.type) {\n        // logs user in\n        case \"login\":\n            return {\n                isLoggedIn: true,\n                fetched: true\n            };\n        case \"logout\":\n            TokenService.clearAuthToken();\n            return {\n                // logs user out\n                name: '',\n                isLoggedIn: false,\n                fetched: false\n            }\n        default:\n            return initialState\n    }\n};\n\nconst UserContextProvider = props => {\n    let [ state, dispatch ] = useReducer(reducer, initialState);\n    let value = { state, dispatch };\n    return (\n        <UserContext.Provider value={value}>\n            { props.children }\n        </UserContext.Provider>\n    );\n};\n\nlet UserContextConsumer = UserContext.Consumer;\n\nexport { UserContext, UserContextProvider, UserContextConsumer };\n","// Redirect utility for logged in users\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\nimport TokenService from '../services/token-service';\n\nconst PrivateRoute = ({component, ...props}) => {\n    const Component = component;\n    return (\n        <Route\n            {...props}\n            render={componentProps => (\n                TokenService.hasAuthToken()\n                    ?   <Component \n                            {...componentProps} \n                        />\n                    :   <Redirect \n                            to={{\n                                pathname: \"/admin-login\"\n                            }}\n                        />\n                        )}\n        />\n    );\n};\n\nexport default PrivateRoute;","// import TokenService from '../services/token-service';\nimport config from '../config';\n\nconst FactsApiService = {\n    \n    getFacts: () => {\n        return fetch(`${config.API_ENDPOINT}/facts`, {\n            headers: {\n                'content-type': 'application/json'\n            }\n        })\n        .then(res => \n            (!res.ok \n                ? res.json().then(e => Promise.reject(e)) \n                : res.json())\n        )\n    },\n\n    addFact: (newFact) => {\n        return fetch(`${config.API_ENDPOINT}/facts`, {\n            method: 'POST',\n            headers: {\n                'content-type': 'application/json'\n            },\n            body: JSON.stringify(newFact)\n        })\n        .then(res => \n            (!res.ok \n                ? res.json().then(e => Promise.reject(e)) \n                : res.json())\n        )\n    },\n\n    updateFact: (fact_id, updatedFact) => {\n        return fetch(`${config.API_ENDPOINT}/facts/id/${fact_id}`, {\n            method: 'PATCH',\n            headers: {\n                'content-type': 'application/json'\n            },\n            body: JSON.stringify(updatedFact)\n        })\n        .then(res => \n            (!res.ok \n                ? res.json().then(e => Promise.reject(e)) \n                : res.json())\n        )\n    },\n\n    deleteFact: (fact_id) => {\n        return fetch(`${config.API_ENDPOINT}/facts/id/${fact_id}`, {\n            method: 'DELETE',\n            headers: {\n                'content-type': 'application/json'\n            }\n        })\n        .then(res =>\n            (!res.ok)\n              ? res.json().then(e => Promise.reject(e))\n              : \"\"\n          )\n    },\n\n    reportFact: (fact_id) => {\n        return fetch(`${config.API_ENDPOINT}/reports`, {\n            method: 'POST',\n            headers: {\n                'content-type': 'application/json'\n            },\n            body: JSON.stringify(fact_id)\n        })\n        .then(res => \n            (!res.ok \n                ? res.json().then(e => Promise.reject(e)) \n                : res.json())\n        )\n    },\n\n    getReports: () => {\n        return fetch(`${config.API_ENDPOINT}/reports`, {\n            method: 'GET',\n            headers: {\n                'content-type': 'application/json'\n            }\n        })\n        .then(res => \n            (!res.ok \n                ? res.json().then(e => Promise.reject(e)) \n                : res.json())\n        )\n    },\n\n    deleteReport: (report_id) => {\n        return fetch(`${config.API_ENDPOINT}/reports/id/${report_id}`, {\n            method: 'DELETE',\n            headers: {\n                'content-type': 'application/json'\n            }\n        })\n        .then(res => \n            (!res.ok \n                ? res.json().then(e => Promise.reject(e)) \n                : res.json())\n        )\n    }\n\n}\n\nexport default FactsApiService;","// Helper functions\nimport { format } from 'date-fns';\n\n// Converts a javascript date object into a human readable time of \"until\" or \"since\"\nconst getTimeString = (direction, dateObj) => {\n\tlet values = {};\n  let difference;\n\tswitch(direction){\n  \tcase \"since\":\n    \tdifference = new Date().getTime() - dateObj.getTime();\n      break;\n\t\tcase \"until\":\n    \tdifference = dateObj.getTime() - new Date().getTime();\n      break;\n    default:\n    \treturn \"Unknown date difference\"\n  }\n\n  if(difference < 0) {\n    return \"Past due\"\n  };\n  \n  values.days = Math.floor(difference / (1000 * 60 * 60 * 24));\n  values.hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n  values.minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));\n  values.seconds = Math.floor((difference % (1000 * 60)) / 1000);\n\t\n  let timeArr = [];\n\n  if(values.days !== 0){\n    timeArr.push(`${values.days}d`);\n    timeArr.push(`${values.hours}h`);\n    timeArr.push(`${values.minutes}m`);\n    timeArr.push(`${values.seconds}s`);\n  }\n  else if(values.hours !== 0){\n    timeArr.push(`${values.hours}h`);\n    timeArr.push(`${values.minutes}m`);\n    timeArr.push(`${values.seconds}s`);\n  }\n  else if(values.minutes !== 0) {\n    timeArr.push(`${values.minutes}m`);\n    timeArr.push(`${values.seconds}s`);\n  }\n  else if(values.seconds !== 0) {\n  \ttimeArr.push(`${values.seconds}s`);\n  }\n  \n\n  return timeArr.join(' ');\n};\n\n// Takes an array of items and adds a date_due_string to them\nconst updateTimeStrings = (items) => {\n  return items.map(item => {\n    return {\n      ...item,\n      date_due_string: getTimeString(\"until\", new Date(item.date_due))\n    }\n  });\n};\n\n// Adds properties we'll need that the API doesn't serve\nconst addAdditionalProperties = (facts, reports) => {\n\n  // modify facts\n  let factsModifier = facts.map(fact => {\n\n\n  })\n\n  // Adds type of projects, how many tasks exist for the project, and the tasks for the project to the projects array\n  // let projectsModifier = projects.map(cur => {\n\n  //   return {\n  //       ...cur,\n  //       date_due_string: getTimeString(\"until\", new Date(cur.date_due)),\n  //       tasks: tasks.filter(task => {\n  //         return task.project_id === cur.id;\n  //       }),\n  //       task_count: tasks.filter(task => {\n  //         return task.project_id === cur.id;\n  //       }).length,\n  //       type: 'projects'\n  //     }\n\n  // });\n\n  // Adds a type of tasks and the project's name to the tasks array\n  // let tasksModifier = tasks.map(cur => {\n  //   return  {\n  //       ...cur,\n  //       date_due_string: getTimeString(\"until\", new Date(cur.date_due)),\n  //       project_name: cur.project_id\n  //         ? projects.find(p => p.id === cur.project_id).title\n  //         : null,\n  //       type: 'tasks'\n  //     }\n  // });\n\n  // Sorts the combination of projects and tasks for the dashboard view by when they're due\n  // let allModifier = projectsModifier.concat(tasksModifier)\n  //   .sort((a, b) => {\n  //     return new Date(a.date_due) - new Date(b.date_due);\n  //   });\n\n  // return {\n  //   projects: projectsModifier,\n  //   tasks: tasksModifier,\n  //   all: allModifier\n  // }\n};\n\nconst prettyDate = (oldDate) => {\n  return format(new Date(oldDate), 'MMM d, yyyy')\n}\n\nconst inputDateFormat = (oldDate) => {\n  return format(new Date(oldDate), 'yyyy-MM-dd')\n}\n\nconst findFactById = (fact_id, facts) => {\n  let factIdInt = parseInt(fact_id)\n  return facts.find(fact => fact.fact_id === factIdInt)\n}\n\nexport {\n  getTimeString,\n  updateTimeStrings,\n  addAdditionalProperties,\n  prettyDate,\n  inputDateFormat,\n  findFactById\n};","// this fetch wrapper will listen and regetch data if needed\nimport React, { useContext, useEffect } from 'react';\n\n// services\nimport FactsApiService from '../services/facts-service';\nimport TokenService from '../services/token-service';\n\n// contexts\nimport { ItemsContext } from '../contexts/ItemsContext';\n\n// helpers\nimport { addAdditionalProperties as modifyQuery } from '../helpers/helpers';\nimport { UserContext } from '../contexts/UserContext';\n\nconst AppWrapper = (props) => {\n    let itemsContext = useContext(ItemsContext);\n    let { dispatch } = useContext(UserContext);\n\n    // log user in and set settings to session\n    let login = (settings) => dispatch({\n        type: 'login',\n        data: settings\n    });\n\n    let logout = (settings) => dispatch({\n      type: 'logout',\n      data: settings\n    })\n\n    let checkUserLoggedIn = () => {\n      return (\n        TokenService.getAuthToken\n        ? login()\n        : logout()\n      );\n    };\n\n    useEffect(() => {\n      Promise.all([\n        FactsApiService.getFacts(),\n        FactsApiService.getReports()\n      ])\n      .then(([facts, reports]) => {\n        // set the contxt with the data that's returned\n        itemsContext.dispatch({\n          type: 'set-facts',\n          payload: facts\n        });\n        itemsContext.dispatch({\n          type: 'set-reports',\n          payload: reports\n        })\n        checkUserLoggedIn()\n      })\n    }, [itemsContext.state.fetched])\n\n  return (\n    <>\n    <div>\n      { props.children }\n    </div>\n      {/* {ItemsContext.state.fetched\n        ? (<main className=\"Main_wrapper\">\n            { props.children }\n          </main>)\n        : (<main className=\"Main_wrapper\">\n            <p className=\"fetching\">Fetching data. Please wait...</p>\n          </main>)\n      } */}\n    </>\n  );\n};\n\nexport default AppWrapper;","// Burger.styled.js\nimport styled from 'styled-components';\nexport const StyledBurger = styled.button`\n  position: absolute;\n  top: 5%;\n  left: 2rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  width: 2rem;\n  height: 2rem;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  padding: 0;\n  z-index: 10;\n  \n  &:focus {\n    outline: none;\n  }\n  \n  div {\n    width: 2rem;\n    height: 0.25rem;\n    background: ${({ theme, open }) => open ? theme.primaryDark : theme.primaryLight};\n    border-radius: 10px;\n    transition: all 0.3s linear;\n    position: relative;\n    transform-origin: 1px;\n\n    :first-child {\n      transform: ${({ open }) => open ? 'rotate(45deg)' : 'rotate(0)'};\n  }\n\n  :nth-child(2) {\n    opacity: ${({ open }) => open ? '0' : '1'};\n    transform: ${({ open }) => open ? 'translateX(20px)' : 'translateX(0)'};\n  }\n\n  :nth-child(3) {\n    transform: ${({ open }) => open ? 'rotate(-45deg)' : 'rotate(0)'};\n  }\n\n`;","// Menu\nimport styled from 'styled-components';\n\nexport const StyledMenu = styled.nav`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  background: ${({ theme }) => theme.primaryLight};\n  height: 100vh;\n  text-align: left;\n  padding: 2rem;\n  position: absolute;\n  top: 0;\n  left: 0;\n  transition: transform 0.3s ease-in-out;\n  transform: translateX(-100%);\n  \n  @media (max-width: ${({ theme }) => theme.mobile}) {\n    width: 100%;\n  }\n\n  a {\n    font-size: 2rem;\n    text-transform: uppercase;\n    padding: 2rem 0;\n    font-weight: bold;\n    letter-spacing: 0.5rem;\n    color: ${({ theme }) => theme.primaryDark};\n    text-decoration: none;\n    transition: color 0.3s linear;\n    \n    @media (max-width: ${({ theme }) => theme.mobile}) {\n      font-size: 1.5rem;\n      text-align: center;\n    }\n\n    &:hover {\n      color: ${({ theme }) => theme.primaryHover};\n    }\n  }\n`;","// This is the app header\nimport React, { useContext, useEffect, useState, useRef } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\n\n// User context\nimport { UserContext } from '../contexts/UserContext';\n\n// Components\nimport Burger from '../components/utils/Burger';\nimport Menu from '../components/utils/Menu';\n\n// Files\nimport './Header.scss';\n\nimport { useOnClickOutside } from '../components/utils/hooks';\n\nconst Header = () => {\n\n    // set up use history\n    const history = useHistory();\n\n    // set up context as user context\n    let userContext = useContext(UserContext);\n    \n    // redirect to admin login\n    const handleLoginClick = () => {\n        history.push(\"/admin-login\")\n    };\n\n    const handleLogoutClick = () => {\n        userContext.dispatch({\n            type: \"logout\"\n        })\n    }\n\n    // toggle header style if logged in or out\n    return (\n\n        <header \n            className={`header Header_wrapper ${!userContext.state.isLoggedIn ? \"launch\" : \"\" }`}\n        >\n            <div className='app-header-div'>\n                <Link to=\"/\">\n                    <h1>TRUTH CHECKER</h1>\n                </Link>\n            </div>\n            <div className='app-header-div'>\n                { userContext.state.isLoggedIn \n                    ?   <>\n                    <Link to='/'>\n                        <p>View Facts</p>\n                    </Link>\n                    <Link to='/reports'>\n                        <p>View Reports</p>\n                    </Link>\n                        <button\n                            className='header-button'\n                            onClick={handleLogoutClick}\n                        >\n                            Logout\n                        </button>\n                        </>\n                    :   (\n                            <button \n                                className='log-in'\n                                onClick={handleLoginClick}\n                            >\n                                Admin Login\n                            </button>\n                        )\n                }\n            </div>\n        </header>\n\n    )\n\n};\n\nexport default Header;","// this is the app footer\nimport React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport './Header.scss';\n\nconst Footer = () => {\n    return (\n        <header className='footer'>\n            <div className='footer-label'>FOOTER</div>\n        </header>\n    )\n}\n\nexport default Footer;","// hamburger menu\nimport React, { useContext } from 'react';\nimport { bool, func } from 'prop-types';\n\n// contexts\nimport { SessionContext } from '../../contexts/SessionContext';\nimport FactsApiService from '../../services/facts-service';\n\n// styling\n//import './Burger.scss';\n\nconst Report = (props) => {\n\n    // Using the session context to control menu state\n    const { state, dispatch } = useContext(SessionContext);\n    const fact_id = props.fact_id;\n\n    const handleReportClick = (id) => {\n        if (window.confirm(`Are you sure you want to report Fact #${fact_id}?`)) {\n            const reportedFact = {\n                fact_id: id\n            };\n            FactsApiService.reportFact(\n                reportedFact    \n            )\n            .then(result => {\n                window.alert(\"Your report has been submitted\")\n            })\n        }\n    };\n\n    return (\n            <button\n                onClick={e => handleReportClick(props.fact_id)}\n            >\n                Report Fact # {fact_id}\n            </button>\n    );\n\n};\n\nexport default Report;","// View component - Root page for logged in users\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\n// Contexts\nimport { UserContext } from '../../../contexts/UserContext';\nimport { ItemsContext } from '../../../contexts/ItemsContext';\nimport { prettyDate, inputDateFormat } from '../../../helpers/helpers'\n\n// Components\nimport Report from '../../utils/Report';\n\n// Helpers\nimport { updateTimeStrings } from '../../../helpers/helpers';\n\n// Element components\n// import Button from 'components/elements/Button/Button';\n\n// Files\nimport './MainFeed.scss';\n\nconst MainFeed = () => {\n\n  // set the two contexts\n  let userContext = useContext(UserContext);\n  let itemsContext = useContext(ItemsContext);\n  \n  const history = useHistory();\n\n  // shorten class name for card labels\n  const factLabel = 'main-feed-fact-label';\n\n  // set local state for search term, results, and status selected\n  const [ searchTerm, setSearchTerm ] = useState(\"\");\n  const [ searchResults, setSearchResults ] = useState([]);\n  const [ statusSelected, setstatusSelected ] = useState(\"All\");\n\n  // update state when search term changes\n  const handleChange = (event) => {\n    setSearchTerm(event.target.value);\n  };\n\n  // update state when status selected changes\n  const handleSelect = (event) => {\n    setstatusSelected(event.target.value)\n  };\n\n  const handleClickAddFact = () => {\n    history.push(\"/submit-fact\")\n  };\n\n  useEffect(() => {\n      \n    // set the results to the facts that include the searchTerm\n    const results = itemsContext.state.facts.filter(fact =>\n      fact.title.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n    // then filter results by that status of the fact\n    // if \"All\" is selected then don't filter\n    const filteredResults = ( statusSelected === \"All\" \n      ? results\n      : results.filter(fact => fact.status === statusSelected)\n    );\n\n    // then set the search results to the filtered results\n    setSearchResults(filteredResults);\n      \n      // if the searchTerm or statusSelected changes, then re-run useEffect\n  }, [searchTerm] );\n\n  useEffect(() => {\n    \n    const results = itemsContext.state.facts.filter(fact =>\n      fact.title.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n    // then filter results by that status of the fact\n    // if \"All\" is selected then don't filter\n    const filteredResults = ( statusSelected === \"All\" \n      ? results\n      : results.filter(fact => fact.status === statusSelected)\n    );\n\n    setSearchResults(filteredResults);\n\n  }, [statusSelected] );\n\n  useEffect(() => {\n    // if something is deleted, reset the results to the updated state\n    const results = itemsContext.state.facts;\n    setSearchResults(results)\n  }, [itemsContext.state.fetched])\n\n  return (\n    \n    <div \n      className=\"main-feed\"\n    >\n      <form \n        onSubmit={e => e.preventDefault()}\n      >\n        <label>Search</label><br/>\n        <input\n          placeholder=\"Search for Fact\"\n          type=\"text\"\n          value={searchTerm}\n          onChange={handleChange}\n        />\n        <br/>\n        <br/>\n        <label>Status</label>\n        <br/>\n        <select \n          value={statusSelected} \n          onChange={handleSelect}\n        >\n          <option value='All'>Show All</option>\n          <option value='Pending'>Pending</option>\n          <option value='Under Review'>Under Review</option>\n          <option value='Approved'>Approved</option>\n          <option value='Not True'>Not True</option>\n        </select>\n      </form>\n\n      <br/>\n      <div className='center'>\n        <button onClick={handleClickAddFact}>Add New Fact</button>\n      </div>\n      \n        { ( searchResults.length === 0 && searchTerm === \"\" ? itemsContext.state.facts : searchResults).sort((a,b) => a.fact_id - b.fact_id).map(fact => \n          {\n            return (\n              <>\n              <div \n                className={'main-feed-fact'}\n                onClick={() => history.push(`/facts/id/${fact.fact_id}`)}\n              >\n                <p>\n                  <span className={factLabel}>Fact</span>\n                  { fact.title }\n                </p>\n                <p>\n                  <span \n                    className={factLabel}\n                  >\n                    Status\n                  </span>\n                    { fact.status }\n                </p>\n                <p>\n                  <span \n                    className={factLabel}\n                  >\n                    Date\n                  </span>\n                {  \n                      fact.status === 'Pending' \n                        ? prettyDate(fact.date_submitted)\n                        : fact.status === 'Under Review'\n                        ? prettyDate(fact.date_submitted)\n                        : fact.status === 'Approved'\n                        ? prettyDate(fact.date_approved)\n                        : fact.status === 'Not True'\n                        ? prettyDate(fact.date_not_true)\n                        : ''\n                    }\n                </p>\n                <p>\n                  <span className={factLabel}>Id</span>\n                    { fact.fact_id }\n                </p>\n              </div>\n              { userContext.state.isLoggedIn \n              ?   (\n                    <>\n                      <button\n                        onClick={e => history.push(`/facts/id/${fact.fact_id}/edit`)}\n                      >\n                        Edit\n                      </button>\n                    </>\n                  )\n              :   <div>\n                    <Report\n                      fact_id={fact.fact_id} \n                    />\n                  </div> \n            }\n              </>\n            )\n          }) \n        }\n\n    </div>\n    \n  );\n\n};\n\nexport default MainFeed;","// Redirect utility for non-authenticated users\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n// import TokenService from 'services/token-service';\n\nconst PublicOnlyRoute = ({ component, ...props }) => {\n  const Component = component;\n  return (\n    <Route\n      {...props}\n      render={componentProps => (\n        <Component {...componentProps} />\n      )}\n    />\n  );\n};\n\nexport default PublicOnlyRoute;","// Hook for easy to manage controlled form inputs.\nimport { useState } from 'react';\n\nexport const UseInputChange = (defaults = {}) => {\n\n  // Set input object to store all edited input fields\n  const [input, setInput] = useState(defaults);\n\n  // Update our state, or create a new input property based on the input's name\n  const handleInputChange = (e) => {\n    // Checkboxes perform differently than inputs. Added a conditional to treat them differently\n    if(e.currentTarget.type === 'checkbox'){\n      setInput({\n        ...input,\n        [e.currentTarget.name]: e.currentTarget.checked\n      });\n    } else {\n      setInput({\n        ...input,\n        [e.currentTarget.name]: e.currentTarget.value\n      });\n    }\n  };\n\n  return (\n    [input, handleInputChange]\n  );\n  \n};","import React from 'react';\n\nconst ApprovedFact = () => {\n    return (\n        <span className=\"approved-fact-label\">\n            Approved Fact √ AF-122-A-022WE\n        </span>\n    )\n}\n\nexport default ApprovedFact;","import React from 'react';\n\nconst ErrorMessage = (props) => {\n    return (\n        <div>\n            <p className=\"form-error-label\">\n                { props.message }\n            </p>\n        </div>\n    )\n}\n\nexport default ErrorMessage;","// to add a fact\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\n// contexts and hooks\nimport { ItemsContext } from '../../../contexts/ItemsContext';\nimport { UseInputChange } from '../../utils/UseInputChange'\n\n// utils\nimport { prettyDate } from '../../../helpers/helpers';\n\n// components\nimport ApprovedFact from '../../utils/ApprovedFact';\nimport ErrorMessage from '../../utils/ErrorMessage'\n\n// service\nimport FactsApiService from '../../../services/facts-service';\n\nconst AddFactForm = () => {\n\n    const history = useHistory();\n\n    const [ input, handleInputChange ] = UseInputChange();\n\n    const itemsContext = useContext(ItemsContext);\n\n    const [ isUSCitizen, setIsUSCitizen ] = useState(false);\n    const [ isNotTerrorist, setIsNotTerrorist ] = useState(false);\n    const [ hasReadTerms, setHasReadTerms ] = useState(false);\n    const [ errors, setErrors ] = useState({});\n\n    const validateAddFact = (e) => {\n        e.preventDefault();\n        let errors = {};\n        if (input.title === undefined || input.title === '') {\n            errors.title = {message: \"Title is required\"}\n        } else if (!isUSCitizen || !isNotTerrorist || !hasReadTerms) {\n            errors.title = {message: \"Must select all checkboxes\"}\n        }\n\n        if (Object.keys(errors).length !== 0) {\n            return (setErrors(errors))\n        } else {\n            submitForm()\n        }\n    }\n\n    // submit form is validation is passed\n    const submitForm = () => {\n        const factProperties = {\n            ...input,\n            user_id: 2\n        };\n        FactsApiService.addFact(factProperties)\n        .then(res => {\n            itemsContext.dispatch({\n                type: 'refetch'\n            });\n            history.push('/');\n        });\n    };\n\n    return (\n\n        <form \n            id=\"Add_Fact_Form\"\n            onSubmit={e => validateAddFact(e)}\n        >\n            <legend><h2>Fact Submission Page</h2></legend>\n            <label htmlFor=\"title-field\">Fact</label>\n            <br/>\n            <input\n                type=\"text\"\n                id=\"title-field\"\n                name=\"title\"\n                onChange={handleInputChange}\n                placeholder=\"All firetrucks are red\"\n            />\n\n            { errors.title \n                ?   <ErrorMessage\n                        message={errors.title.message}\n                    />\n            : \"\"\n            }\n\n            <label>Reference/Citation (Not Applicable)</label>\n            <br/>\n            <br/>\n                <div className=\"align-left\">\n                <label>To Submit, you must agree to the following</label>\n                <br/>\n                <input \n                    name=\"citizen\"\n                    type=\"checkbox\" \n                    checked={isUSCitizen}\n                    onChange={e => setIsUSCitizen(!isUSCitizen)}\n                />\n                <label>\n                    I am a U.S. Citizen\n                </label>\n                <br/>\n                <input \n                    name=\"not-terrorist-1\"\n                    type=\"checkbox\" \n                    checked={isNotTerrorist}\n                    onChange={e => setIsNotTerrorist(!isNotTerrorist)}\n                />\n                <label>\n                    I am not a Terrorist\n                </label>\n                <br/>\n                <input \n                    name=\"terms-conditions\"\n                    type=\"checkbox\" \n                    checked={hasReadTerms}\n                    onChange={e => setHasReadTerms(!hasReadTerms)}\n                />\n                <label>\n                    I agree to Terms and Conditions\n                </label>\n                </div>\n            <br/>\n            <button type='submit'>Submit</button>\n            <br/>\n            <br/>\n            <button onClick={() => history.push('/')}>Cancel</button>\n            <br/>\n            <p>Terms and Conditions</p>\n            <ul className='terms-and-conditions'>\n                <li>You relinquish any and all privacy for the puropse of community and national safety. <ApprovedFact/></li>\n                <li>Not Agreeing to these Terms and Conditions means you want to see the destruction of the U.S.A. <ApprovedFact/></li>\n                <li>All data submitted is the property of the U.S. Government. <ApprovedFact/></li>\n                <li>Any submission in violation of these Terms and Conidtions is punishable by death and/or $1,000,000 fine (whichever comes first). <ApprovedFact/></li>\n                <li>You agree that the United States is the best country in the world and will never jepordize it's security in any way. <ApprovedFact/></li>\n                <li>Not agreeing to these Terms, even without a submission, means you are a Terrorist. <ApprovedFact/></li>\n                <li>If you are a Terrorist, you are an Enemy Combatant, and do not have protection under U.S. law. <ApprovedFact/></li>\n                <li>Enemy Combatants have no rights and relinquish all rights of safety, security, and respect as a human being. <ApprovedFact/></li>\n                <li>If you are not with the U.S.A., you are with 'Them'. 'Them' being Terrorists. Terrorists being Enemy Combatants. Enemy Conbatants have no rights and are less-than-human and want an unsafe community, women, and children. <ApprovedFact/></li>\n                <li>This is all a joke. None of this is true.</li>\n            </ul>\n        </form>\n\n    )\n\n}\n\nexport default AddFactForm;","// service to handle login and users\nimport config from '../config';\n\nconst UsersService = {\n\n    // login the user in\n    postLogin: (credentials) => {\n        return (\n            fetch(`${config.API_ENDPOINT}/auth/login`, {\n                method: 'POST',\n                headers: {\n                    'content-type': 'application/json'\n                },\n                body: JSON.stringify(credentials)\n            })\n            .then(res => \n                (!res.ok \n                    ? res.json().then(e => Promise.reject(e)) \n                    : res.json())\n            )\n        )\n    }\n}\n\nexport default UsersService;","// ADMIN LOGIN COMPONENT\nimport React, { useContext, useEffect, useState } from 'react';\n\n// contexts\nimport { UserContext } from '../../../contexts/UserContext';\n\n// components\nimport  ErrorMessage from '../../utils/ErrorMessage';\nimport { useHistory } from 'react-router-dom';\nimport { UseInputChange } from '../../utils/UseInputChange'\n\nimport UsersService from '../../../services/users-service';\nimport TokenService from '../../../services/token-service';\n\nconst Login = () => {\n    \n    let { dispatch } = useContext(UserContext);\n    const [ errors, setErrors ] = useState({});\n    \n    // logs user in\n    let login = (data) => dispatch({\n        type: \"login\",\n        data: data\n    });\n\n    const history = useHistory();\n\n    // initialize input context\n    const [ input, handleInputChange ] = UseInputChange();\n\n    // validate form\n    const validateAdminLoginForm = (e) => {\n        e.preventDefault();\n        let errors = {};\n        // if ( input[\"email\"] === undefined || input[\"email\"] === '' ) {\n        //     errors = { error: \"Email is required\" }\n        // }\n        if ( input[\"password\"] === undefined || input[\"password\"] === '' ) {\n            errors = { error: \"Password is required\" }\n        }\n\n        if ( Object.keys(errors).length !== 0 ) {\n            return (\n                setErrors(errors)\n            );\n        } else {\n            submitLogin();\n        }\n    };\n\n    // submits form if creds are provided\n    const submitLogin = () => {\n        \n        // set login credentials\n        const loginCreds = {\n            email: \"admin@dtf.gov\",\n            password: input[\"password\"]\n        };\n\n        // use service to post the login\n        UsersService.postLogin(loginCreds)\n        .then(res => {\n            TokenService.saveAuthToken(res.authToken, res.user_id);\n            loginCreds.email = '';\n            loginCreds.password = '';\n        })\n        .then(res => {\n            // Once the token and id are posted\n            // go to the root\n            login(res)\n            history.push('/');\n        })\n        .catch(res => {\n            // update error text if there's an issue\n            setErrors(res)\n        })\n\n    };\n\n    return (\n\n        <form\n            onSubmit={e => validateAdminLoginForm(e)}\n        >\n            <legend>Login</legend>\n            <br/>\n            <br/>\n            <label>Email</label>\n            <input\n                id=\"email-field\"\n                type=\"email\"\n                name=\"email\"\n                autoComplete=\"email\"\n                value =\"admin@dtf.gov\"\n                onChange={handleInputChange}\n            />\n            <br/>\n            <br/>\n            <label>Password</label>\n            <input\n                id=\"password-field\"\n                type=\"password\"\n                name=\"password\"\n                autoComplete=\"current-password\"\n                onChange={handleInputChange}\n            />\n            <br/>\n            <br/>\n            <button>Submit</button>\n            { errors.error \n                ?   <ErrorMessage message={errors.error}\n                    />\n                :   \"\"\n            }\n            <br/>\n            <br/>\n            <button\n                onClick={e => history.push('/')}\n            >\n                Cancel\n            </button>\n        </form>\n\n    )\n\n}\n\nexport default Login;","// to add a fact\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\n// contexts and hooks\nimport { ItemsContext } from '../../../contexts/ItemsContext';\nimport { UseInputChange } from '../../utils/UseInputChange'\n\n// utils\nimport { inputDateFormat, findFactById } from '../../../helpers/helpers';\n\n// components\nimport ErrorMessage from '../../utils/ErrorMessage'\n\n// service\nimport FactsApiService from '../../../services/facts-service';\n\nimport './EditFactForm.scss'\n\nconst EditFactForm = (props) => {\n\n    // bring in itemsContext\n    const itemsContext = useContext(ItemsContext);\n\n    // initialize history\n    const history = useHistory();\n\n    const currentFact = findFactById(props.fact_id, itemsContext.state.facts)\n\n    const [ input, handleInputChange ] = UseInputChange({\n        //...currentFact\n    });\n\n    const [title, setTitle] = useState();\n    const [text, setText] = useState();\n    const [factId, setFactId] = useState();\n    const [submitted, setSubmitted] = useState();\n    const [underReview, setUnderReview] = useState();\n    const [approved, setApproved] = useState();\n    const [notTrue, setNotTrue] = useState();\n    const [errors, setErrors] = useState({});\n\n    useEffect(() => {\n        if ( itemsContext.state.fetched ) {\n            setTitle(currentFact.title);\n            setFactId(currentFact.fact_id);\n            setText(currentFact.text || '');\n            setSubmitted( currentFact.date_submitted ? inputDateFormat(currentFact.date_submitted) : null )\n            setUnderReview( currentFact.date_under_review ? inputDateFormat(currentFact.date_under_review) : null )\n            setApproved( currentFact.date_approved ? inputDateFormat(currentFact.date_approved) : null )\n            setNotTrue( currentFact.date_not_true ? inputDateFormat(currentFact.date_not_true) : null )\n        }\n    }, [itemsContext.state.fetched]);\n\n    const handleClickDelete = (fact_id) => {\n        if (window.confirm(`Are you sure you want to delete this Fact?`)) {\n            FactsApiService.deleteFact(fact_id)\n                .then(res => {\n                    itemsContext.dispatch({\n                        type: 'refetch'\n                    });\n                    history.push('/')\n                })\n        }\n    }\n\n    // validate form\n    const validateEditFactForm = (event) => {\n        event.preventDefault();\n        let errors = {};\n\n        // if title isn't set then set error\n        /*\n        if ( title.length !== 0 && input.title !== undefined && input.title !== '' ) {\n            errors.title = { message: \"Title is required\" }\n        }\n        */\n\n        // if there is more than zero errors, set them\n        // otherwise submit the form\n        if (Object.keys(errors).length !== 0) {\n            return (setErrors(errors))\n        } else {\n            submitForm()\n        }\n\n    };\n\n    // submit form when validation is passed\n    const submitForm = () => {\n\n        const factFields = {\n            ...input,\n            // since public user, hard code it to 2 \n            user_id: 2\n        };\n\n        FactsApiService.updateFact(props.fact_id, factFields)\n            .then(res => {\n                itemsContext.dispatch({\n                    type: 'refetch'\n                });\n                history.push('/')\n            })\n\n    };\n\n    return (\n        <>\n        <form\n            id=\"Add_Fact_Form\"\n            onSubmit={e => validateEditFactForm(e)}\n        >\n            <legend><h2>Edit Fact Form</h2></legend>\n            <p>Fact id: {factId}</p>\n            <label htmlFor=\"title-field\">Title </label>\n            <input\n                type=\"text\"\n                id=\"title-field\"\n                name=\"title\"\n                onChange={handleInputChange}\n                defaultValue={title}\n                placeholder=\"Title\"\n            />\n            <br/>\n            <label htmlFor=\"text-field\">Text </label>\n            <input\n                type=\"text\"\n                id=\"text-field\"\n                name=\"text\"\n                onChange={handleInputChange}\n                defaultValue={text}\n                placeholder=\"additional text (optional) \"\n            />\n            <br/>\n            <p> Today is { inputDateFormat(new Date()) } </p>\n            <p> Dates below are dd/mm/yyyy </p>\n            <label>Submitted </label>\n            <input \n                type=\"date\" \n                name=\"date_submitted\"\n                onChange={handleInputChange}\n                defaultValue={submitted}\n            />\n            <br/>\n            <label>Under Review </label>\n            <input \n                type=\"date\" \n                name=\"date_under_review\"\n                onChange={handleInputChange}\n                defaultValue={underReview}\n            />\n            <br/>\n            <label>Approved </label>\n            <input \n                type=\"date\" \n                name=\"date_approved\"\n                onChange={handleInputChange}\n                defaultValue={approved}\n            />\n            <br/>\n            <label>Not True </label>\n            <input \n                type=\"date\" \n                name=\"date_not_true\"\n                onChange={handleInputChange}\n                defaultValue={notTrue}\n            />\n            <br/>\n            <br/>\n            <br/>\n            { errors.title \n                ?   <ErrorMessage\n                        message={errors.title.message}\n                    />\n            : \"\"\n            }\n            <br/>\n            <button type='submit'>Update</button>\n            <br/>\n            <br/>\n            <button \n                onClick={() => history.push('/')}\n            >\n                Cancel\n            </button>\n            <br/>\n            <br/>\n        </form>\n        <button\n                onClick={e => handleClickDelete(factId)}\n            >\n                Delete\n        </button>\n        </>\n    )\n\n}\n\nexport default EditFactForm;","import React, { useContext, useEffect, useState } from 'react';\nimport { ItemsContext } from '../../../contexts/ItemsContext';\nimport { useHistory } from 'react-router-dom';\nimport { findFactById } from '../../../helpers/helpers';\nimport Report from '../../utils/Report';\n\nconst ViewFact = (props) => {\n    // bring in itemsContext\n    const [fact, setFact] = useState({})\n    const itemsContext = useContext(ItemsContext);\n    // init history\n    const history = useHistory();\n\n    // set fact info when page reloads\n    useEffect(() => {\n        // get current fact data\n        if ( itemsContext.state.fetched ) {\n            let fact =\n            itemsContext.state.facts.find(fact => {\n                let factIdInt = parseInt(props.fact_id);\n                return fact.fact_id === factIdInt\n            });\n        setFact(fact)\n        }\n    }, [itemsContext.state.fetched]);\n    return (\n        <div> \n            <p>Title: {fact.title}</p>\n            <p>Text: {fact.text}</p>\n            <p>Fact Id: {fact.fact_id}</p>\n            <p>Status: {fact.status}</p>\n            <p>Submitted: {fact.date_submittd}</p>\n            <p>Under Review: {fact.date_under_review}</p>\n            <p>Date Approved: {fact.date_approved}</p>\n            <p>Not True: {fact.date_not_true}</p>\n            <button\n                onClick={() => history.push('/')}\n            >\n                Back\n            </button>\n            <br/>\n            <br/>\n            <Report\n                fact_id={fact.fact_id} \n            />\n            <br/>\n            <br/>\n        </div>\n    )\n}\n\nexport default ViewFact;","import React, { useContext, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { ItemsContext } from '../../../contexts/ItemsContext';\n\nimport './ReportFeed.scss'\nimport FactsApiService from '../../../services/facts-service';\n\nconst ReportFeed = () => {\n\n    let itemsContext = useContext(ItemsContext);\n\n    const factLabel = 'main-feed-fact-label';\n    const reportLabel = 'report-label';\n\n    const [ reportedFacts, setReportedFacts ] = useState([]);\n\n    const handleDismissReportClick = (fact_id) => {\n        if (window.confirm(`Are you sure you want to approve Fact #${fact_id}? It will remain public on the Facts feed.`)) {            \n    }};\n\n    const handleApproveReportClick = (fact_id) => {\n        if (window.confirm(`Are you sure you want to disapprove of Fact #${fact_id}? It will be deleted immediately and will have never existed.`)) {\n            FactsApiService.deleteFact(\n                fact_id\n            )\n            .then(() => {\n                window.alert(\"The Fact, which never existed, has been deleted. Which is impossible. But you don't know that.\")\n            })\n        }\n    };\n\n    useEffect(() => {\n\n        setReportedFacts(itemsContext.state.reports)\n       \n    }, [itemsContext.state.fetched]);\n\n    return (\n\n        <div\n            className=\"main-feed\"\n        >\n            <p>Number of Reports</p>\n            { reportedFacts.sort((a,b) => b.number_of_reports - a.number_of_reports).map(ft => {\n                return (\n                    <div className='report-conntainer'>\n                        <p><span className={reportLabel}>Fact Id</span>{ ft.fact_id }</p>\n                        <p><span className={reportLabel}>Title</span>{ ft.title }</p>\n                        <p><span className={reportLabel}>Text</span>{ ft.text }</p>\n                        <p><span className={reportLabel}>User Id</span>{ ft.user_id }</p>\n                        <p><span className={reportLabel}>Status</span>{ ft.fact_status }</p>\n                        <p><span className={reportLabel}>Date Submitted</span>{ ft.date_submitted }</p>\n                        <p><span className={reportLabel}>Number of Reports</span>{ ft.number_of_reports }</p>\n                            <div>\n                                <span>\n                                    <button\n                                        onClick={e => handleApproveReportClick(ft.fact_id)}\n                                    >\n                                        Delete Fact\n                                    </button>\n                                </span>\n                            </div>\n                    </div>\n                )\n            })}\n        </div>\n    )\n\n};\n\nexport default ReportFeed;","import React, { useState, useRef } from 'react';\r\nimport { Switch } from 'react-router-dom';\r\n\r\nimport { ThemeProvider } from 'styled-components';\r\n\r\nimport Burger from './components/utils/Burger';\r\nimport Menu from './components/utils/Menu';\r\n\r\nimport FocusLock from 'react-focus-lock';\r\nimport './App.css';\r\nimport PublicRoute from './utils/PublicRoute';\r\nimport PrivateRoute from './utils/PrivateRoute';\r\nimport MainFeed from './components/views/MainFeed/MainFeed';\r\nimport Header from './structure/Header';\r\nimport Footer from './structure/Footer';\r\nimport AddFactForm from './components/views/AddFactForm/AddFactForm';\r\nimport EditFactForm from './components/views/EditFactForm/EditFactForm';\r\nimport AdminLogin from './components/views/AdminLogin/AdminLogin';\r\nimport ViewFact from './components/views/ViewFact/ViewFact';\r\nimport ReportFeed from './components/views/ReportFeed/ReportFeed';\r\n\r\nfunction App() {\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const node = useRef();\r\n  const menuId = \"main-menu\";\r\n\r\n  return (\r\n    \r\n      <>\r\n         <Header/>\r\n          <body>\r\n          <Switch>\r\n            <PublicRoute\r\n              exact path ={ '/' }\r\n              component={ MainFeed }\r\n            />\r\n            <PublicRoute\r\n              path={'/admin-login'}\r\n              component={ AdminLogin }\r\n            />\r\n            <PublicRoute\r\n              path={'/submit-fact'}\r\n              component={ AddFactForm }\r\n            />\r\n            <PublicRoute\r\n              exact path={'/facts/id/:fact_id'}\r\n              component={(props) => {\r\n                return (\r\n                  <ViewFact\r\n                    fact_id={props.match.params.fact_id}\r\n                  />\r\n                )\r\n              }}\r\n            />\r\n            <PrivateRoute\r\n              exact path={'/facts/id/:fact_id/edit'}\r\n              component={(props) => {\r\n                return (\r\n                  <EditFactForm\r\n                    fact_id={props.match.params.fact_id}\r\n                  />\r\n                )\r\n              }}\r\n            />\r\n            <PrivateRoute\r\n              exact path={'/reports'}\r\n              component={ ReportFeed }\r\n            />\r\n          </Switch>\r\n          </body>\r\n          <Footer/>\r\n      </>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","// this sets up a 'slice'\nimport { createSlice } from '@reduxjs/toolkit';\n\n// make a constant 'factsSlice'\n// call the method createSlice\n// set the name and initial value\n// then set the reducer methods\nexport const factsSlice = createSlice({\n    name: 'facts',\n    initialState: {\n        value: 100\n    },\n    reducers: {\n        // state is in the store\n        // it's set below\n        // action is used to passed something in\n        // .payload is what's being passed in\n        addFact: (state, action) => {\n            state.value += action.payload;\n        },\n        removeFact: (state, action) => {\n            state.value -= action.payload;\n        },\n        incrementByAmount: (state, action) => {\n            state.value += action.payload\n        }\n    },\n});\n\n// set the reducers above equal to the variable with .actions\nexport const { addFact, removeFact, incrementByAmount } = factsSlice.actions;\n\n// export a variable that sets the component state\n// to the state in the store\nexport const selectFacts = state => state.counter2.value;\n\n// then export the variable with .reducer\nexport default factsSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport counter2Reducer from '../features/Facts/factsSlice';\r\n\r\n// set up a store\r\nexport default configureStore({\r\n  // set reducer\r\n  reducer: {\r\n    counter: counterReducer,\r\n    counter2: counter2Reducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nimport AuthContextProvider from './contexts/AuthContextProvider';\r\nimport { UserContextProvider } from './contexts/UserContext';\r\n\r\nimport { Routes } from './Routes';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWrapper from './structure/AppWrapper';\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <AuthContextProvider>\r\n      <UserContextProvider>\r\n        <AppWrapper>\r\n        {/* <Routes/> */}\r\n          <App/>\r\n        </AppWrapper>\r\n      </UserContextProvider>\r\n    </AuthContextProvider>\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}